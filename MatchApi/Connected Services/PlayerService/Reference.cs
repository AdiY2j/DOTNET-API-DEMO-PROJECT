//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MatchApi.PlayerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nationalityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int playerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string playerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int playerScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> wicketsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nationality {
            get {
                return this.nationalityField;
            }
            set {
                if ((object.ReferenceEquals(this.nationalityField, value) != true)) {
                    this.nationalityField = value;
                    this.RaisePropertyChanged("nationality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string playerName {
            get {
                return this.playerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.playerNameField, value) != true)) {
                    this.playerNameField = value;
                    this.RaisePropertyChanged("playerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerScore {
            get {
                return this.playerScoreField;
            }
            set {
                if ((this.playerScoreField.Equals(value) != true)) {
                    this.playerScoreField = value;
                    this.RaisePropertyChanged("playerScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> wickets {
            get {
                return this.wicketsField;
            }
            set {
                if ((this.wicketsField.Equals(value) != true)) {
                    this.wicketsField = value;
                    this.RaisePropertyChanged("wickets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PlayerService.IPlayerService")]
    public interface IPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayers", ReplyAction="http://tempuri.org/IPlayerService/GetPlayersResponse")]
        MatchApi.PlayerService.Player[] GetPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayers", ReplyAction="http://tempuri.org/IPlayerService/GetPlayersResponse")]
        System.Threading.Tasks.Task<MatchApi.PlayerService.Player[]> GetPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayer", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerResponse")]
        MatchApi.PlayerService.Player GetPlayer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayer", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerResponse")]
        System.Threading.Tasks.Task<MatchApi.PlayerService.Player> GetPlayerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Insert", ReplyAction="http://tempuri.org/IPlayerService/InsertResponse")]
        bool Insert(MatchApi.PlayerService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Insert", ReplyAction="http://tempuri.org/IPlayerService/InsertResponse")]
        System.Threading.Tasks.Task<bool> InsertAsync(MatchApi.PlayerService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Update", ReplyAction="http://tempuri.org/IPlayerService/UpdateResponse")]
        bool Update(MatchApi.PlayerService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Update", ReplyAction="http://tempuri.org/IPlayerService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(MatchApi.PlayerService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Delete", ReplyAction="http://tempuri.org/IPlayerService/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Delete", ReplyAction="http://tempuri.org/IPlayerService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceChannel : MatchApi.PlayerService.IPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServiceClient : System.ServiceModel.ClientBase<MatchApi.PlayerService.IPlayerService>, MatchApi.PlayerService.IPlayerService {
        
        public PlayerServiceClient() {
        }
        
        public PlayerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MatchApi.PlayerService.Player[] GetPlayers() {
            return base.Channel.GetPlayers();
        }
        
        public System.Threading.Tasks.Task<MatchApi.PlayerService.Player[]> GetPlayersAsync() {
            return base.Channel.GetPlayersAsync();
        }
        
        public MatchApi.PlayerService.Player GetPlayer(int id) {
            return base.Channel.GetPlayer(id);
        }
        
        public System.Threading.Tasks.Task<MatchApi.PlayerService.Player> GetPlayerAsync(int id) {
            return base.Channel.GetPlayerAsync(id);
        }
        
        public bool Insert(MatchApi.PlayerService.Player player) {
            return base.Channel.Insert(player);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAsync(MatchApi.PlayerService.Player player) {
            return base.Channel.InsertAsync(player);
        }
        
        public bool Update(MatchApi.PlayerService.Player player) {
            return base.Channel.Update(player);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(MatchApi.PlayerService.Player player) {
            return base.Channel.UpdateAsync(player);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
    }
}
